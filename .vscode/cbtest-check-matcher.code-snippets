{
	// Place your cbtest workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"cbtest check Matcher": {
		"scope": "go",
		"prefix": "cbtestMatcher",
		"body": [
			"type ${1:structName} struct {}",
			"",
			"func (${2:receiverName} *$1) Match(actual interface{}) (bool, error) {",
			"    return true, nil",
			"}",
			"",
			"func ($2 *$1) FailureMessage(actual interface{}) string {",
			"    return \"Failure message goes here\"",
			"}",
			"",
			"func ($2 *$1) NegatedFailureMessage(actual interface{}) string {",
			"    return \"Negated failure message goes here\"",
			"}",
			"",
			"func ${3:FactoryFunctionName}(${4:arguments}) check.Matcher {",
			"    return &$1{}",
			"}"
		],
		"description": "Create a cbtest check Matcher implementation"
	}
}