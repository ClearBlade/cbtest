// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package fanout

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// mockTWithRunParallel is an autogenerated mock type for the tWithRunParallel type
type mockTWithRunParallel struct {
	mock.Mock
}

// Error provides a mock function with given fields: args
func (_m *mockTWithRunParallel) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: format, args
func (_m *mockTWithRunParallel) Errorf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// FailNow provides a mock function with given fields:
func (_m *mockTWithRunParallel) FailNow() {
	_m.Called()
}

// Helper provides a mock function with given fields:
func (_m *mockTWithRunParallel) Helper() {
	_m.Called()
}

// Log provides a mock function with given fields: args
func (_m *mockTWithRunParallel) Log(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logf provides a mock function with given fields: format, args
func (_m *mockTWithRunParallel) Logf(format string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Name provides a mock function with given fields:
func (_m *mockTWithRunParallel) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Parallel provides a mock function with given fields:
func (_m *mockTWithRunParallel) Parallel() {
	_m.Called()
}

// Run provides a mock function with given fields: name, f
func (_m *mockTWithRunParallel) Run(name string, f func(*testing.T)) bool {
	ret := _m.Called(name, f)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, func(*testing.T)) bool); ok {
		r0 = rf(name, f)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
